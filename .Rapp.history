> library("flexClust")
df = read.csv('feature_set.csv')
str(df)
ncols(df)
ncol(df)
summary(df$1524)
summary(df$X1524)
summary(df$X1523)
summary(df$X1522)
table(df$X1522)
library(rpart)
library(rpart.plot)
library(randomForest)
cartmod = rpart(X1522 ~ . - X, data=df)
prp(cartmod)
require(xgboost)
require(methods)
train = read.csv('feature_set.csv', header=FALSE, stringsAsFactors=F)
train = train[,-1]
y = train[,ncol(train)]
table(y)
train = read.csv('feature_set.csv', header=TRUE, stringsAsFactors=F)
train = train[,-1]
y = train[,ncol(train)]
x = asmatrix(train[,-ncol(train)])
x = as.matrix(train[,-ncol(train)])
x = matrix(as.numeric(x), nrow(x), ncol(x))
param <- list("objective" = "binary:logistic", "eval_metric" = "aux", "nthread" = 2, "max_depth" = , "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9, "colsample_bytree" = 0.8)
param <- list("objective" = "binary:logistic", "eval_metric" = "aux", "nthread" = 2, "max_depth" = 5, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9, "colsample_bytree" = 0.8)
cv.nround = 50
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 5, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9, "colsample_bytree" = 0.8)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 4, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9, "colsample_bytree" = 0.8)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 4, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.7, "colsample_bytree" = 0.8)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 4, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.8, "colsample_bytree" = 0.8)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 4, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9, "colsample_bytree" = 0.9)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = 45)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = 45)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 4, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9)
bst.cv = xgb.cv(param = param, data=x, label=y, nfold=3, nrounds = cv.nround)
test = read.csv('test_set.csv', header=TRUE, stringsAsFactors=F)
test = test[-1]
x = as.matrix(test)
x = matrix(as.numeric(x), nrow(x), ncol(x))
nround=50
require(xgboost)
require(methods)
train = read.csv('feature_set.csv', header=TRUE, stringsAsFactors=F)
test = read.csv('test_set.csv', header=TRUE, stringsAsFactors=F)
train = train[,-1]
test = test[,-1]
y = train[,ncol(train)]
x = rbind(train[,ncol(train)], test)
x = rbind(train[,-ncol(train)], test)
dim(x)
x = as.matrix(x)
x = matrix(as.numeric(x), nrow(x), ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 4, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.9)
cv.nround=50
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
cv.nround=80
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
cv.nround=50
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
nround=50
bst = xgboost(param=param, data=x[trind,], label=y, nrounds=nround)
pred = predict(bst, x[teind,])
str(pred)
pred = matrix(pred,1,length(pred))
pred = t(pred)
pred = format(pred, digits=2,scientific=F)
dim(x)
6533
8402
dim(x[teind,])
pred = data.frame(6533:8402,pred)
names(pred) = c('UniqueID', 'Probability1')
write.csv(pred, file='pred_xgboost.csv', quote=FALSE, row.names=FALSE)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 1, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=3, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 0.5, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 0.4, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 0.3, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 0.4, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 0.3, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 2, "gamma" = 0.4, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 10, "gamma" = 0.4, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 6, "gamma" = 0.4, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
param <- list("objective" = "binary:logistic", "eval_metric" = "auc", "nthread" = 2, "max_depth" = 3, "min_child_weight" = 4, "gamma" = 0.4, "subsample" = 0.8)
bst.cv = xgb.cv(param=param, data=x[trind,], label=y, nfold=5, nrounds = cv.nround)
bst = xgboost(param=param, data=x[trind,], label=y, nrounds=nround)
pred = predict(bst, x[teind,])
pred = matrix(pred,1,length(pred))
pred = t(pred)
pred = format(pred, digits=2,scientific=F)
pred = data.frame(6533:8402,pred)
names(pred) = c('UniqueID', 'Probability1')
write.csv(pred, file='pred_xgboost.csv', quote=FALSE, row.names=FALSE)
